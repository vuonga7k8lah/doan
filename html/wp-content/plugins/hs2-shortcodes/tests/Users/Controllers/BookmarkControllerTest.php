<?php


namespace HSSCTEST\Controllers;


use HSSC\Users\Models\BookmarkModel;
use HSSCTEST\CommonController;

class BookmarkControllerTest extends CommonController
{
	public $postId;
	public $userId;

	public function setUp()
	{
		$this->postId = $this->insertPost();
		$this->userId = 1;
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function insertPost()
	{
		$postId = wp_insert_post([
			'post_title'   => 'test',
			'post_content' => 'test'
		]);
		return $postId;
	}

	public function testGetBookmark()
	{
		$status = BookmarkModel::isExist($this->getData());
		$this->assertTrue($status);
	}

	public function getData()
	{
		return [
			'postId' => $this->postId,
			'userId' => $this->userId
		];
	}

	public function testInsertBookmark()
	{
		$aResponse = $this->restGET('bookmark', [
			'postId' => $this->getData()['postId'],
			'userId' => $this->getData()['userId']
		]);
		$this->assertEquals('success', $aResponse['status'], 'returns the status of success');
		$this->assertEquals('yes', $aResponse['bookmark'], 'insert bookmark success');
		return [
			'postId' => $this->getData()['postId'],
			'userId' => $this->getData()['userId']
		];
	}

	/**
	 * @depends testInsertBookmark
	 */
	public function testUpdateBookmark($aData)
	{
		$aResponse = $this->restGET('bookmark', $aData);
		$this->assertEquals('success', $aResponse['status'], 'returns the status of success');
		$this->assertEquals('no', $aResponse['bookmark'], 'updated bookmark success');
	}
}